msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Sun Oct 27 18:16:21 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! ðŸŽ‰"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warningsâ€¦ ðŸŽ­"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! ðŸŽ‰"
msgstr ""

#: Game.Levels.Inception
msgid "Inception"
msgstr ""

#: Game.Levels.Inception
msgid "Garnet: In order to begin, I have to show you how lean prove things.\n"
"There are two parts that are important for you, and so I have to unfuse myself in order to explain those important things to you.\n"
"\n"
"Ruby: There are two areas you can go. Both of them build on eachother.\n"
"\n"
"Saphire: So completing one will help you figure out how to complete the other.\n"
"Ruby and saphire: So lets begin!"
msgstr ""

#: Game.Levels.Ruby.Simple_tactics
msgid "Simple tactics"
msgstr ""

#: Game.Levels.Ruby.Simple_tactics
msgid "Ruby: Lets look at our first tactic: `rfl`\n"
"\n"
"rfl stands for `reflexivity of equality`. This states that a=a will be allways be a=a no matter what you change.\n"
"Try it out."
msgstr ""

#: Game.Levels.Ruby.Simple_tactics
msgid "Given n, prove that n is equal to n"
msgstr ""

#: Game.Levels.Ruby.Simple_tactics
msgid "There you go. Lets see annother tactic."
msgstr ""

#: Game.Levels.Ruby.Rewrite_respond
msgid "Rewrite â†’ Respond"
msgstr ""

#: Game.Levels.Ruby.Rewrite_respond
msgid "Ruby: Lets look at our next tactic: `rw` and `rewrite`\n"
"Both of then do the same thing. However there is one difference between them.\n"
"Figure it out."
msgstr ""

#: Game.Levels.Ruby.Rewrite_respond
msgid "Given that a is equal to n, prove that a = n"
msgstr ""

#: Game.Levels.Ruby.Rewrite_respond
msgid "Ruby: Heres the difference `rw` has `rfl` built in while `rewrite` does not.\n"
"This means that in order for you to finish the goal, you must use `rfl` after the `rewrite` in order to close the goal.\n"
"`rewrite` is not used allot in proofs because of this. You know what to do now."
msgstr ""

#: Game.Levels.Ruby.Rewrite_respond
msgid "There you go. Thats all you need.\n"
"More tactics are available in later levels."
msgstr ""

#: Game.Levels.Ruby
msgid "Ruby"
msgstr ""

#: Game.Levels.Ruby
msgid "Ruby: Tactics are importtant to lean. Tactics are used to change, create, and close goals.\n"
"Lets see some tactics."
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "Reflexivity"
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "Lets look at our first theorem: rfl\n"
"\n"
"`rfl` stands for `reflexivity of equality`. This states that a=a will be allways be a=a, no matter what you change.\n"
"`rfl` only works if the both sides of the equal sign is exactly the same. (e.g. a=a, b=b)\n"
"However, simple arithmetic proofs can also be proven via the theorem`rfl`.\n"
"Lets try it."
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "Given a, prove that a = a"
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "saphire Well done. Lets see another theorem of rfl"
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "the theorem rfl stands for `reflexivity of equality`. This states that a=a will be allways be a=a no matter what you change.\n"
"rfl is also a tactic."
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "This proof is simmilar to to the theorem `rfl`.\n"
"It is recommended to use `rfl` instead of `Eq.refl`"
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "`refl` stands for `reflexivity of equality`. This states that a=a will be allways be a=a, no matter what you change.\n"
"`Iff.refl` is similar to rfl. It is not constructive, meaning it can only prove that that both sides of the equal sign is exact.\n"
"(e.g. a=a, b=b, a+b=b+a, 2+4=2+4)"
msgstr ""

#: Game.Levels.Saphire.add_zero
msgid "add_zero"
msgstr ""

#: Game.Levels.Saphire.add_zero
msgid "Saphire: Lets look at our first proof add_zero.\n"
"We will learn more what â„• is in the next world, but we will ignore it for right now."
msgstr ""

#: Game.Levels.Saphire.add_zero
msgid "Given n as a Nat, prove that a plus 0 equals a"
msgstr ""

#: Game.Levels.Saphire.add_zero
msgid "Saphire: Well done."
msgstr ""

#: Game.Levels.Saphire.add_zero
msgid "Eq.refl is simular to the theorem rfl.\n"
"However, it is more specialize in arithmetic cases. So it is recomended to use the `rfl` theorem instead."
msgstr ""

#: Game.Levels.Saphire.add_succ
msgid "add_succ"
msgstr ""

#: Game.Levels.Saphire.add_succ
msgid "Saphire: Lets look at our first proof add_zero.\n"
"We will learn more what â„• is in the next world, but we will ignore it for right now."
msgstr ""

#: Game.Levels.Saphire.add_succ
msgid "Given n as a Nat, prove that a plus 0 equals a"
msgstr ""

#: Game.Levels.Saphire.add_succ
msgid "Saphire: Well done. Now we have all of the theorems needed for our next world."
msgstr ""

#: Game.Levels.Saphire
msgid "Saphire"
msgstr ""

#: Game.Levels.Saphire
msgid "Saphire: Theorems are important to prove anything in lean. Even the simpliest theorem require a multitude of therorems to prove that theorem.\n"
"We are going to use simple theorems, and make simple proofs that in which will be used in a later world.\n"
"When you use a tactic, lean `apply`s a multitude of subsequent proofs to it.\n"
"You can just use apply to finish every single goal.\n"
"So for right now, we will be only using `apply` to prove proofs."
msgstr ""

#: Game.Levels.Garnet
msgid "Garnet"
msgstr ""

#: Game.Levels.Garnet
msgid "Now, we can begin with simple arithmatic proofs and work our way up from here.\n"
"I will guide you through for more complicated assumptions."
msgstr ""

#: Game
msgid "Hello World Game"
msgstr ""

#: Game
msgid "Through some sort of accident you tried when making a wormhole. You accidentally enter a different world.\n"
"There are living breathing humans arround. You thought that you are home. Just then, you notice, the big donut store.\n"
"You realize that you are in beach city. You realize that you are in the world, know as steven universe.\n"
"You know that steven, and the crystal gems are powerful enough to take you back to home.\n"
"However, when meeting them, you quickly realize that they are working on something. They are working on the something in the 'LEAN: theorem prover'\n"
"Just before you leave and figure out a different way a gem spots you.\n"
"\n"
"Garnet: Hello there human. Looks like you come from a different world. Your memory could have been erased with the trip, or maybe not.\n"
"I and the crystal gems will help you learn how to prove things in lean and in doing so will figure out how to fix the portal.\n"
"\n"
"Lean is a proof asistant and a flexible language that allows you to create proofs, by using tactics to try and prove the proof.\n"
"We will start with simple proofs and beginner tactics to more advanced proofs, to logic in sets and functional proofs"
msgstr ""

#: Game
msgid "Steven universe and its characters is the proprety of cartoon network and by proxy, turner broadcasting networks.\n"
"This is a fan-made creation, not an offical cartoon network product."
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "A steven universe story for the lean. Great for beginners.\n"
"Ruby image is by Gord0Hong0 in the Steven universe wiki.\n"
"Saphire image is by TheOffColors in the Steven universe wiki.\n"
"Garnet image is by Zombiewizard45 in the Steven universe wiki."
msgstr ""
